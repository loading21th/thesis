import os
from django.db import  models

AppPath =  os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def get_image_path(instance,filename):
    file_path = os.path.join(AppPath,'image',instance.name,filename)
    return file_path

def get_upfile_path(instance,filename):
    file_path = os.path.join(AppPath,'uploadfile',instance.schoolname,instance.classname,filename)
    return file_path

def get_video_path(instance,filename):
    file_path = os.path.join(AppPath,'goTemplates','videos',filename)
    return file_path

class Userinfo(models.Model):
    name = models.CharField(max_length=40)
    upasswd = models.CharField(max_length=40)
    uemail = models.EmailField(max_length=40)
    ubirth = models.DateField(max_length=40)
    uimage = models.ImageField(upload_to=get_image_path)
    umoney = models.IntegerField()
    usex = models.CharField(max_length=40)


class UStudentinfo(Userinfo):
    can_update = modles.BooleanField()

class Uteacherinfo(Userinfo):
    uGo_credential = models.ImageField(upload_to=get_image_path)
    uTeach_credential = models.ImageField(upload_to=get_image_path) 
    udescripition = models.TextField() 
    can_createschool = modles.BooleanField() 

class campus(models.Model):
    name = models.CharField(max_length=40)
    abbreviation = models.CharField(max_length=10) 
    stage = models.CharField(max_length=40)
    logo = models.ImageField(upload_to=get_image_path)
    bio = models.TextField()    
    pupose = models.TextField() 
    teacher = models.ForeignKey('Uteacherinfo')
    can_createclass = modles.BooleanField() 

class classroom(models.Model):
    name = models.CharField(max_length=40)
    abbreviation = models.CharField(max_length=10) 
    teacher = models.CharField(max_length=40) 
    stage = models.IntegerField()
    logo = models.ImageField(upload_to=get_image_path)
    bio = models.TextField()    
    time = models.TextField() 
    price = models.IntegerField()
    rtmpaddr = models.CharField(max_length=40)
    campus = models.ForeignKey('campus')

class students_classes(models.Model):
    student = models.ForeignKey('Userinfo')
    classroom = models.ForeignKey('classroom')


class teacher_classes(models.Model):
    teacher = models.ForeignKey('Uteacherinfo')
    classroom = models.ForeignKey('classroom')

class homework(models.Model):
    classroom = models.ForeignKey('classroom')
    homework = models.FileField(upload_to=get_upfile_path)

class videos(models.Model):
    stage = models.IntegerField()
    name = models.CharField(max_length=40)
    logo = models.ImageField(upload_to=get_image_path)
    addr = models.FileField(upload_to=get_video_path)
    
class BuyBaseView(View): 
    def pay(fromid,toid,moneysum):
        fromid -= moneysum
        toid += moneysum
        return

class RedisHelper:
    def __init__(self,channel):
        self.channel = channel
        self.__conn = redis.Redis(host='192.168.15.12')
        self.pub = self.__conn.pubsub()
        self.pub.subscribe(self.channel)

    def publishi(self,msg):
        self.__conn.publish(self.channel,msg)

    def unsubscribe(self):
        self.pub.unsubscribe()


    def subscribe(self,websocket):
        logger = logging.getLogger('django')
        logger.debug('*****'+str(os.getpid())+' : '+str(threading.currentThread())+' : i am the new thread')
        count = 0
        try:
            for item in self.pub.listen():
                if item['type'] == 'message':
                    count = count +1
                    logger.debug('*****'+str(os.getpid())+' : '+str(threading.currentThread())+' :recive message: '+str(item['data']))
                    websocket.send(item['data'])
        finally:
            logger.debug('*****'+str(os.getpid())+' : '+str(threading.currentThread())+' : unsubscribe')
            self.unsubscribe()

    @postfork
    def writeback(self,websocket):
        logger = logging.getLogger('django')
        logger.debug('*****'+str(os.getpid())+' : '+str(threading.currentThread())+' : ready to start a new thread')
        th1 = threading.Thread(target=self.subscribe,args=(websocket,))
        th1.start()
